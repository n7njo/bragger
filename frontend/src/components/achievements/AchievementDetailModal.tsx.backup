import React, { useState } from 'react';
import { 
  Calendar, 
  Clock, 
  Users, 
  Edit2, 
  Trash2, 
  ExternalLink, 
  Image as ImageIcon,
  Tag as TagIcon,
  Target,
  X
} from 'lucide-react';
import { Achievement, Milestone } from '../../types';
import { format } from 'date-fns';
import { Button } from '../ui/Button';
import { ImageViewer } from '../ui/ImageViewer';
import { MilestoneList } from './MilestoneList';
import { MilestoneProgress } from './MilestoneProgress';

interface AchievementDetailModalProps {
  achievement: Achievement | null;
  isOpen: boolean;
  onClose: () => void;
  onEdit?: (achievement: Achievement) => void;
  onDelete?: (achievement: Achievement) => void;
  onAchievementUpdate?: (achievement: Achievement) => void;
}

export function AchievementDetailModal({ 
  achievement, 
  isOpen, 
  onClose, 
  onEdit, 
  onDelete,
  onAchievementUpdate
}: AchievementDetailModalProps) {
  const [showImageViewer, setShowImageViewer] = useState(false);
  const [selectedImageIndex, setSelectedImageIndex] = useState(0);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [activeTab, setActiveTab] = useState<'details' | 'milestones'>('details');

  const formatDate = (dateString: string) => {
    try {
      return format(new Date(dateString), 'MMMM d, yyyy');
    } catch {
      return dateString;
    }
  };

  const formatShortDate = (dateString: string) => {
    try {
      return format(new Date(dateString), 'MMM yyyy');
    } catch {
      return dateString;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'complete':
        return 'bg-green-100 text-green-800 border-green-200';
      case 'usable':
        return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'concept':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'idea':
        return 'bg-gray-100 text-gray-800 border-gray-200';
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getStatusLabel = (status: string) => {
    return status.charAt(0).toUpperCase() + status.slice(1);
  };

  const handleImageClick = (imageIndex: number) => {
    setSelectedImageIndex(imageIndex);
    setShowImageViewer(true);
  };

  const handleEdit = () => {
    if (onEdit && achievement) {
      onEdit(achievement);
    }
    onClose();
  };

  const handleMilestonesUpdate = (milestones: Milestone[]) => {
    if (achievement && onAchievementUpdate) {
      onAchievementUpdate({
        ...achievement,
        milestones
      });
    }
  };

  const handleDelete = () => {
    setShowDeleteConfirm(true);
  };

  const confirmDelete = () => {
    if (onDelete && achievement) {
      onDelete(achievement);
    }
    setShowDeleteConfirm(false);
    onClose();
  };

  React.useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        onClose();
      }
    };

    if (isOpen) {
      document.addEventListener('keydown', handleKeyDown);
      document.body.style.overflow = 'hidden';
      return () => {
        document.removeEventListener('keydown', handleKeyDown);
        document.body.style.overflow = 'unset';
      };
    }
  }, [isOpen, onClose]);

  if (!isOpen || !achievement) return null;

  return (
    <>
      <div className="fixed inset-0 z-50 overflow-y-auto">
        <div className="flex min-h-screen items-center justify-center p-4 text-center sm:p-0">
          {/* Backdrop */}
          <div 
            className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" 
            onClick={onClose}
          />
          
          {/* Modal */}
          <div className="relative transform overflow-hidden rounded-lg bg-white text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-4xl mx-4">
            {/* Header */}
            <div className="bg-white px-4 sm:px-6 py-4 border-b border-gray-200">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <div className="flex-1">
                    <h2 className="text-xl font-semibold text-gray-900 pr-8">
                      {achievement.title}
                    </h2>
                    <div className="flex items-center space-x-2 mt-2">
                      {achievement.category && (
                        <span 
                          className="text-xs px-3 py-1 rounded-full text-white font-medium"
                          style={{ backgroundColor: achievement.category.color || '#6B7280' }}
                        >
                          {achievement.category.name}
                        </span>
                      )}
                      <span className={`text-xs px-3 py-1 rounded-full border ${getStatusColor(achievement.status)}`}>
                        {getStatusLabel(achievement.status)}
                      </span>
                    </div>
                  </div>
                </div>
                
                <div className="flex items-center space-x-2">
                  {(onEdit || onDelete) && (
                    <div className="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-2">
                      {onEdit && (
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={handleEdit}
                        >
                          <Edit2 className="h-4 w-4 mr-2" />
                          <span className="hidden sm:inline">Edit</span>
                        </Button>
                      )}
                      {onDelete && (
                        <Button
                          variant="destructive"
                          size="sm"
                          onClick={handleDelete}
                        >
                          <Trash2 className="h-4 w-4 mr-2" />
                          <span className="hidden sm:inline">Delete</span>
                        </Button>
                      )}
                    </div>
                  )}
                  <button
                    type="button"
                    className="rounded-md bg-white text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 p-2"
                    onClick={onClose}
                  >
                    <span className="sr-only">Close</span>
                    <X className="h-5 w-5" />
                  </button>
                </div>
              </div>
            </div>

            {/* Tabs */}
            <div className="bg-gray-50 px-4 sm:px-6 py-3 border-b border-gray-200">
              <div className="flex space-x-6">
                <button
                  onClick={() => setActiveTab('details')}
                  className={`pb-2 text-sm font-medium border-b-2 transition-colors ${
                    activeTab === 'details'
                      ? 'border-primary-500 text-primary-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700'
                  }`}
                >
                  Details
                </button>
                <button
                  onClick={() => setActiveTab('milestones')}
                  className={`pb-2 text-sm font-medium border-b-2 transition-colors flex items-center space-x-2 ${
                    activeTab === 'milestones'
                      ? 'border-primary-500 text-primary-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700'
                  }`}
                >
                  <Target className="h-4 w-4" />
                  <span>Milestones</span>
                  {achievement?.milestones && achievement.milestones.length > 0 && (
                    <span className="bg-gray-200 text-gray-700 text-xs rounded-full px-2 py-1">
                      {achievement.milestones.length}
                    </span>
                  )}
                </button>
              </div>
            </div>

            {/* Content */}
            <div className="bg-white px-4 sm:px-6 py-6 max-h-[calc(100vh-200px)] overflow-y-auto">
              {activeTab === 'details' ? (
                <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                {/* Main Content */}
                <div className="lg:col-span-2 space-y-6">
                  {/* Description */}
                  <div>
                    <h3 className="text-sm font-medium text-gray-900 mb-2">Description</h3>
                    <p className="text-gray-700 leading-relaxed whitespace-pre-wrap">
                      {achievement.description}
                    </p>
                  </div>

                  {/* Impact */}
                  {achievement.impact && (
                    <div>
                      <h3 className="text-sm font-medium text-gray-900 mb-2 flex items-center">
                        <Target className="h-4 w-4 mr-2" />
                        Impact
                      </h3>
                      <p className="text-gray-700 leading-relaxed whitespace-pre-wrap">
                        {achievement.impact}
                      </p>
                    </div>
                  )}

                  {/* Skills */}
                  {achievement.skillsUsed && achievement.skillsUsed.length > 0 && (
                    <div>
                      <h3 className="text-sm font-medium text-gray-900 mb-3">Skills Used</h3>
                      <div className="flex flex-wrap gap-2">
                        {achievement.skillsUsed.map((skill, index) => (
                          <span 
                            key={index}
                            className="text-sm bg-blue-100 text-blue-700 px-3 py-1 rounded-full"
                          >
                            {skill}
                          </span>
                        ))}
                      </div>
                    </div>
                  )}

                  {/* Images */}
                  {achievement.images && achievement.images.length > 0 && (
                    <div>
                      <h3 className="text-sm font-medium text-gray-900 mb-3 flex items-center">
                        <ImageIcon className="h-4 w-4 mr-2" />
                        Images ({achievement.images.length})
                      </h3>
                      <div className="grid grid-cols-2 sm:grid-cols-3 gap-3">
                        {achievement.images.map((image, index) => (
                          <div 
                            key={image.id} 
                            className="aspect-square bg-gray-200 rounded-lg overflow-hidden cursor-pointer hover:opacity-80 transition-opacity group"
                            onClick={() => handleImageClick(index)}
                            title="Click to view full size"
                          >
                            <img
                              src={`/api/images/${image.filename}`}
                              alt={image.originalName}
                              className="w-full h-full object-cover group-hover:scale-105 transition-transform duration-200"
                              loading="lazy"
                            />
                          </div>
                        ))}
                      </div>
                    </div>
                  )}

                  {/* Tags */}
                  {achievement.tags && achievement.tags.length > 0 && (
                    <div>
                      <h3 className="text-sm font-medium text-gray-900 mb-3 flex items-center">
                        <TagIcon className="h-4 w-4 mr-2" />
                        Tags
                      </h3>
                      <div className="flex flex-wrap gap-2">
                        {achievement.tags.map((tag) => (
                          <span 
                            key={tag.id}
                            className="text-sm bg-gray-100 text-gray-700 px-3 py-1 rounded-full border"
                          >
                            {tag.name}
                          </span>
                        ))}
                      </div>
                    </div>
                  )}
                </div>

                {/* Sidebar */}
                <div className="space-y-6">
                  {/* Timeline */}
                  <div className="bg-gray-50 rounded-lg p-4">
                    <h3 className="text-sm font-medium text-gray-900 mb-3">Timeline</h3>
                    <div className="space-y-3">
                      <div className="flex items-center text-sm">
                        <Calendar className="h-4 w-4 mr-2 text-gray-400" />
                        <div>
                          <div className="text-gray-500">Started</div>
                          <div className="font-medium">{formatDate(achievement.startDate)}</div>
                        </div>
                      </div>
                      {achievement.endDate && (
                        <div className="flex items-center text-sm">
                          <Calendar className="h-4 w-4 mr-2 text-gray-400" />
                          <div>
                            <div className="text-gray-500">Completed</div>
                            <div className="font-medium">{formatDate(achievement.endDate)}</div>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>

                  {/* Metrics */}
                  <div className="bg-gray-50 rounded-lg p-4">
                    <h3 className="text-sm font-medium text-gray-900 mb-3">Metrics</h3>
                    <div className="space-y-3">
                      {achievement.durationHours && (
                        <div className="flex items-center text-sm">
                          <Clock className="h-4 w-4 mr-2 text-gray-400" />
                          <div>
                            <div className="text-gray-500">Duration</div>
                            <div className="font-medium">{achievement.durationHours} hours</div>
                          </div>
                        </div>
                      )}
                      {achievement.teamSize && (
                        <div className="flex items-center text-sm">
                          <Users className="h-4 w-4 mr-2 text-gray-400" />
                          <div>
                            <div className="text-gray-500">Team Size</div>
                            <div className="font-medium">{achievement.teamSize} {achievement.teamSize === 1 ? 'person' : 'people'}</div>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>

                  {/* Links */}
                  {achievement.githubUrl && (
                    <div className="bg-gray-50 rounded-lg p-4">
                      <h3 className="text-sm font-medium text-gray-900 mb-3">Links</h3>
                      <a 
                        href={achievement.githubUrl}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="inline-flex items-center text-sm text-blue-600 hover:text-blue-800 hover:underline"
                      >
                        <ExternalLink className="h-4 w-4 mr-2" />
                        View on GitHub
                      </a>
                    </div>
                  )}

                  {/* Metadata */}
                  <div className="bg-gray-50 rounded-lg p-4">
                    <h3 className="text-sm font-medium text-gray-900 mb-3">Details</h3>
                    <div className="space-y-2 text-sm">
                      <div>
                        <span className="text-gray-500">Created:</span>
                        <span className="ml-2 font-medium">{formatShortDate(achievement.createdAt)}</span>
                      </div>
                      <div>
                        <span className="text-gray-500">Updated:</span>
                        <span className="ml-2 font-medium">{formatShortDate(achievement.updatedAt)}</span>
                      </div>
                    </div>
                  </div>
                </div>
              ) : (
                <div className="max-w-4xl mx-auto">
                  {/* Milestone Progress in Header */}
                  {achievement?.milestones && achievement.milestones.length > 0 && (
                    <div className="mb-6 bg-gray-50 rounded-lg p-4">
                      <MilestoneProgress milestones={achievement.milestones} size="lg" showDetails />
                    </div>
                  )}
                  
                  {/* Milestone List */}
                  <MilestoneList
                    achievementId={achievement?.id || ''}
                    milestones={achievement?.milestones || []}
                    onMilestonesUpdate={handleMilestonesUpdate}
                  />
                </div>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Image Viewer */}
      <ImageViewer
        images={achievement.images || []}
        isOpen={showImageViewer}
        onClose={() => setShowImageViewer(false)}
        initialImageIndex={selectedImageIndex}
      />

      {/* Delete Confirmation Modal */}
      {showDeleteConfirm && (
        <div className="fixed inset-0 z-[60] overflow-y-auto">
          <div className="flex min-h-screen items-center justify-center p-4 text-center sm:p-0">
            <div 
              className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" 
              onClick={() => setShowDeleteConfirm(false)}
            />
            
            <div className="relative transform overflow-hidden rounded-lg bg-white px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:p-6">
              <div className="sm:flex sm:items-start">
                <div className="mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10">
                  <Trash2 className="h-6 w-6 text-red-600" />
                </div>
                <div className="mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left">
                  <h3 className="text-base font-semibold leading-6 text-gray-900">
                    Delete Achievement
                  </h3>
                  <div className="mt-2">
                    <p className="text-sm text-gray-500">
                      Are you sure you want to delete "{achievement.title}"? This action cannot be undone.
                    </p>
                  </div>
                </div>
              </div>
              <div className="mt-5 sm:mt-4 sm:flex sm:flex-row-reverse">
                <Button
                  type="button"
                  variant="destructive"
                  onClick={confirmDelete}
                  className="sm:ml-3"
                >
                  Delete
                </Button>
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => setShowDeleteConfirm(false)}
                  className="mt-3 sm:mt-0"
                >
                  Cancel
                </Button>
              </div>
            </div>
          </div>
        </div>
      )}
    </>
  );
}